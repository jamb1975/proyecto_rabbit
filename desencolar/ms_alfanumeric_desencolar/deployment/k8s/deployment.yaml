apiVersion: v1
kind: Service
metadata:
  name: #{service}#
  namespace: #{namespace}#
  labels:
    app.bancolombia.com.co/env: #{env}#
    app.bancolombia.com.co/cost-center: #{cost-center}#
    app.bancolombia.com.co/application-code: #{application-code}#
    app.bancolombia.com.co/project: #{project-name}#
    app.bancolombia.com.co/pmo: #{pmo}#
spec:
  selector:
    app: #{project-name}#
    pod: #{service}#-pod
  ports:
    - name: http
      targetPort: #{container-port}#
      port: #{service-port}#
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #{service}#-deployment
  namespace: #{namespace}#
  labels:
    app.bancolombia.com.co/env: #{env}#
    app.bancolombia.com.co/cost-center: #{cost-center}#
    app.bancolombia.com.co/application-code: #{application-code}#
    app.bancolombia.com.co/project: #{project-name}#
    app.bancolombia.com.co/pmo: #{pmo}#
spec:
  replicas: #{replicas}#
  selector:
    matchLabels:
      pod: #{service}#-pod
  template:
    metadata:
      labels:
        app: #{project-name}#
        pod: #{service}#-pod
        app.bancolombia.com.co/project: #{project-name}#
        version: #{version}#
    #        oneagent.dynatrace.com/instance: oneagentapm
    #      annotations:
    #        oneagent.dynatrace.com/inject: "true"
    spec:
      securityContext:
        fsGroup: #{java_gid}#
      serviceAccountName: #{project-name}#-iam-sa
      containers:
        - name: #{service}#-container
          image: #{image}#
          envFrom:
            - configMapRef:
                name: #{service}#-configmap
          resources:
            requests:
              cpu: "#{requests-cpu}#"
              memory: "#{requests-memory}#"
            limits:
              cpu: "#{requests-cpu-limit}#"
              memory: "#{requests-memory-limit}#"
          ports:
            - containerPort: #{container-port}#
          env:
            - name: ENVIRONMENT
              value: #{env}#
          volumeMounts:
            - name: config
              mountPath: /home/appuser/config
              readOnly: true
          #            - name: keystores
          #              mountPath: /home/appuser/jks
          #              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
          startupProbe:
            httpGet:
              path: #{health-path}#
              port: #{container-port}#
            periodSeconds: #{probe-period-startup}#
            timeoutSeconds: #{probe-period-startup}#
            failureThreshold: #{probe-period-startup-failures}#
          readinessProbe:
            httpGet:
              path: #{health-path}#
              port: #{container-port}#
            periodSeconds: #{probe-period-readiness}#
            timeoutSeconds: #{probe-period-readiness}#
          livenessProbe:
            httpGet:
              path: #{health-path}#
              port: #{container-port}#
            periodSeconds: #{probe-period-liveness}#
            timeoutSeconds: #{probe-period-liveness}#
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              pod: #{service}#-pod
      nodeSelector:
        eks: clavealfanumerica
      tolerations:
        - effect: "NoSchedule"
          key: "vngclavealfanumerica"
          operator: "Equal"
          value: "clavealfanumerica"
        - effect: "NoExecute"
          key: "vngclavealfanumerica"
          operator: "Equal"
          value: "clavealfanumerica"
      volumes:
        - name: config
          configMap:
            name: #{service}#-configmap
#        - name: keystores
#          emptyDir: { }
